// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/TerrenceHo/ABFeature/models"

import stores "github.com/TerrenceHo/ABFeature/models/services/stores"

// IExperimentStore is an autogenerated mock type for the IExperimentStore type
type IExperimentStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *IExperimentStore) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: queryModifiers
func (_m *IExperimentStore) GetAll(queryModifiers []stores.QueryModifier) ([]*models.Experiment, error) {
	ret := _m.Called(queryModifiers)

	var r0 []*models.Experiment
	if rf, ok := ret.Get(0).(func([]stores.QueryModifier) []*models.Experiment); ok {
		r0 = rf(queryModifiers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Experiment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]stores.QueryModifier) error); ok {
		r1 = rf(queryModifiers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *IExperimentStore) GetByID(id string) (*models.Experiment, error) {
	ret := _m.Called(id)

	var r0 *models.Experiment
	if rf, ok := ret.Get(0).(func(string) *models.Experiment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Experiment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: exp
func (_m *IExperimentStore) Insert(exp *models.Experiment) error {
	ret := _m.Called(exp)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Experiment) error); ok {
		r0 = rf(exp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: exp
func (_m *IExperimentStore) Update(exp *models.Experiment) error {
	ret := _m.Called(exp)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Experiment) error); ok {
		r0 = rf(exp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
