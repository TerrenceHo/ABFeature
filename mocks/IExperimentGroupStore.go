// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/TerrenceHo/ABFeature/models"

// IExperimentGroupStore is an autogenerated mock type for the IExperimentGroupStore type
type IExperimentGroupStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: experimentID, groupID
func (_m *IExperimentGroupStore) Delete(experimentID string, groupID string) error {
	ret := _m.Called(experimentID, groupID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(experimentID, groupID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllExperimentsByGroup provides a mock function with given fields: group_id
func (_m *IExperimentGroupStore) GetAllExperimentsByGroup(group_id string) ([]*models.Experiment, error) {
	ret := _m.Called(group_id)

	var r0 []*models.Experiment
	if rf, ok := ret.Get(0).(func(string) []*models.Experiment); ok {
		r0 = rf(group_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Experiment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(group_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllGroupsByExperiment provides a mock function with given fields: experiment_id
func (_m *IExperimentGroupStore) GetAllGroupsByExperiment(experiment_id string) ([]*models.Group, error) {
	ret := _m.Called(experiment_id)

	var r0 []*models.Group
	if rf, ok := ret.Get(0).(func(string) []*models.Group); ok {
		r0 = rf(experiment_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Group)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(experiment_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByExperimentAndGroup provides a mock function with given fields: experimentID, groupID
func (_m *IExperimentGroupStore) GetByExperimentAndGroup(experimentID string, groupID string) (*models.ExperimentGroup, error) {
	ret := _m.Called(experimentID, groupID)

	var r0 *models.ExperimentGroup
	if rf, ok := ret.Get(0).(func(string, string) *models.ExperimentGroup); ok {
		r0 = rf(experimentID, groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ExperimentGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(experimentID, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *IExperimentGroupStore) GetByID(id string) (*models.ExperimentGroup, error) {
	ret := _m.Called(id)

	var r0 *models.ExperimentGroup
	if rf, ok := ret.Get(0).(func(string) *models.ExperimentGroup); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ExperimentGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: exp_group
func (_m *IExperimentGroupStore) Insert(exp_group *models.ExperimentGroup) error {
	ret := _m.Called(exp_group)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.ExperimentGroup) error); ok {
		r0 = rf(exp_group)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
