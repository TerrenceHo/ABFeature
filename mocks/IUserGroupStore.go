// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/TerrenceHo/ABFeature/models"

// IUserGroupStore is an autogenerated mock type for the IUserGroupStore type
type IUserGroupStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: user_id, group_id
func (_m *IUserGroupStore) Delete(user_id string, group_id string) error {
	ret := _m.Called(user_id, group_id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(user_id, group_id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllGroupsByUser provides a mock function with given fields: user_id
func (_m *IUserGroupStore) GetAllGroupsByUser(user_id string) ([]*models.Group, error) {
	ret := _m.Called(user_id)

	var r0 []*models.Group
	if rf, ok := ret.Get(0).(func(string) []*models.Group); ok {
		r0 = rf(user_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Group)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(user_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUsersByGroup provides a mock function with given fields: group_id
func (_m *IUserGroupStore) GetAllUsersByGroup(group_id string) ([]*models.User, error) {
	ret := _m.Called(group_id)

	var r0 []*models.User
	if rf, ok := ret.Get(0).(func(string) []*models.User); ok {
		r0 = rf(group_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(group_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *IUserGroupStore) GetByID(id string) (*models.UserGroup, error) {
	ret := _m.Called(id)

	var r0 *models.UserGroup
	if rf, ok := ret.Get(0).(func(string) *models.UserGroup); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserAndGroup provides a mock function with given fields: user_id, group_id
func (_m *IUserGroupStore) GetByUserAndGroup(user_id string, group_id string) (*models.UserGroup, error) {
	ret := _m.Called(user_id, group_id)

	var r0 *models.UserGroup
	if rf, ok := ret.Get(0).(func(string, string) *models.UserGroup); ok {
		r0 = rf(user_id, group_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(user_id, group_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: user_group
func (_m *IUserGroupStore) Insert(user_group *models.UserGroup) error {
	ret := _m.Called(user_group)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.UserGroup) error); ok {
		r0 = rf(user_group)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
